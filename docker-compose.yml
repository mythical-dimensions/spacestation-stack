version: '3.8'

volumes:
  keys:
  
networks:
  network:
    driver: bridge
    ipam:
      config:
        - subnet: 10.5.0.0/16
          gateway: 10.5.0.1

services:
  watchdog:
    image: ss14-watchdog
    build:
      context: ./watchdog
      dockerfile: Dockerfile
    ports:
      - "1212:1212/udp"
      - "1212:1212/tcp"
    volumes:
      - ./watchdog/appsettings.yml:/app/appsettings.yml:ro
      - ./watchdog/config.toml:/app/instances/mythical_dimensions/config.toml:ro
      - ./watchdog/data:/app/instances/mythical_dimensions:rw
    #  - ./watchdog/data/binaries:/app/instances/mythical_dimensions/binaries:rw
    #  - ./watchdog/data/bin:/app/instances/mythical_dimensions/bin:rw
    #  - ./watchdog/data/data:/app/instances/mythical_dimensions/data:rw
    networks:
      network:
        ipv4_address: 10.5.0.2
  admin:
    image: ss14-admin
    build:
      context: ./admin
      dockerfile: Dockerfile
    environment:
      ASPNETCORE_ENVIRONMENT: Development
    volumes:
      - ./admin/appsettings.yml:/app/appsettings.yml:ro
      - keys:/root/.aspnet/DataProtection-Keys:rw
    networks:
      network:
        ipv4_address: 10.5.0.3
  database:
    image: postgres
    restart: always
    environment:
      POSTGRES_DB: ss14
      POSTGRES_USER: ss14-user
      POSTGRES_PASSWORD: 5Hvbvhxm3Qoaqi7b
    volumes:
      - ./database:/var/lib/postgresql/data
    networks:
      network:
        ipv4_address: 10.5.0.4
      
  adminer:
    image: adminer
    restart: always
    environment: 
      ADMINER_DEFAULT_SERVER: database
      ADMINER_DESIGN: bueltge
    networks:
      network:
        ipv4_address: 10.5.0.5
  router:
    image: nginx
    restart: always
    command: "/bin/sh -c 'while :; do sleep 6h & wait $${!}; nginx -s reload; done & nginx -g \"daemon off;\"'"
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - certbot
    volumes:
      - ./nginx/default.conf:/etc/nginx/conf.d/default.conf:ro
      - ./nginx/static:/usr/share/nginx/html:ro
      - ./nginx/proxy_params:/etc/nginx/proxy_params:ro
      - ./nginx/.htpasswd:/etc/nginx/.htpasswd:ro
      - ./certs/letsencrypt:/etc/letsencrypt:ro
      - ./certs/certbot:/var/www/certbot:ro
    networks:
      network:
        ipv4_address: 10.5.0.6
  certbot:
    image: certbot/certbot
    restart: always
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"
    volumes:
      - ./certs/letsencrypt:/etc/letsencrypt:rw
      - ./certs/certbot:/var/www/certbot:rw
      - ./certs/letsencrypt:/var/lib/letsencrypt:rw
      - ./certs/logs:/var/log/letsencrypt:rw
    networks:
      network:
        ipv4_address: 10.5.0.7
  watchtower:
    image: containrrr/watchtower
    restart: always
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:rw
    networks:
      network:
        ipv4_address: 10.5.0.8
  discord:
    image: dss
    build:
      context: ./discord
      dockerfile: Dockerfile
    restart: always
    depends_on:
      - router
      - watchdog
    volumes:
      - ./discord/.env:/app/.env
      - ./discord/config.json:/app/config.json
    networks:
      network:
        ipv4_address: 10.5.0.9
    